This example runs the blast workflow twice.
The first part of the workflow results in ~/blast_output and the second part in
~/blast_output2.
The repeated tasks depend on the conclusion (off-line dependency) of the first
set of tasks and will reuse the images so that the images are not untarred again.
See *.beefile and blast-repeat.beeflow

To accomplish this:

   All beefiles use the same container:
   "container_path": "/scratch/beedev/blast/blast.tar.gz"
   the image is untarred to /var/tmp/blast on all nodes (by default)

   The first set of beefiles:
   (blast-split, blast-ouput, blast-ouput-err, and blast-worker001,2).beefile
   "remove_after_exec" is set to false.

   The second set of beefiles:
   (blast-split2, blast-ouput2, blast-ouput-err2, and blast-worker003,4).beefile
   "use_existing_image" is set to true.

# On one screen:

salloc -p galton -N5  (if the allocation is other than cn[30-34] modify the beefiles)
bee_orc_ctl.py

# On the 2nd screen:

ssh <to the headnode of the allocation (cn30)> 
cd  <path to blast-repeat.beeflow, this directory>
bee_composer.py -f blast-repeat
bee_launcher.py -s # optional to watch status of the tasks

Outputs will be in ~/blast-output and ~/blast-output2 and should look like this:

$ ll -h ~/blast_output
total 15M
-rw-rw-r-- 1 pagrubel pagrubel    0 Nov  7 09:39 input.fasta.0.err
-rw-rw-r-- 1 pagrubel pagrubel 2.3M Nov  7 09:43 input.fasta.0.out
-rw-rw-r-- 1 pagrubel pagrubel    0 Nov  7 09:39 input.fasta.1.err
-rw-rw-r-- 1 pagrubel pagrubel 2.3M Nov  7 09:42 input.fasta.1.out
-rw-rw-r-- 1 pagrubel pagrubel 4.5M Nov  7 09:43 output.fasta
-rw-rw-r-- 1 pagrubel pagrubel    0 Nov  7 09:43 output.fasta.err
-rwxr-xr-x 1 pagrubel pagrubel 910K Nov  7 09:39 small.fasta
-rw-rw-r-- 1 pagrubel pagrubel 484K Nov  7 09:39 small.fasta.0
-rw-rw-r-- 1 pagrubel pagrubel 426K Nov  7 09:39 small.fasta.1

~

